--dart-http-boundary-oXk+dj5BnCOr4WVUVyqcMlQup7oF_-+lLRquDOA3SGkyx_tC9RK
content-type: application/octet-stream
content-disposition: form-data; name="file"; filename="dfsbfs.txt"

#include <bits/stdc++.h>
using namespace std;

void dfs(vector<vector<int>> &graph,vector<int> &visited,int index,vector<int> &ans){
    visited[index] = 1;
    ans.push_back(index);
    for(auto &it: graph[index]){
        if(!visited[it]){
            dfs(graph,visited,it,ans);
        }
    }
}

void bfs(vector<vector<int>> &graph,vector<int> &visited,int index,vector<int> &ans){
    if(visited[index]) return;

    queue<int> q;
    q.push(index);
    visited[index] = 1;
    ans.push_back(index);

    while(!q.empty()){
        int node = q.front();
        q.pop();
        for(auto &adj: graph[node]){
            if(!visited[adj]){
                q.push(adj);
                visited[adj] = 1;
                ans.push_back(adj);
            }
        }
    }
}

int main(){
    vector<vector<int>> graph;
    int n;
    cout << "Enter number of nodes ";
    cin >> n;
    graph.resize(n);
    vector<int> ans,visited(n,0);
    for(int i=0;i<n;i++){
        int adj;
        cout << "Enter number of adjecent nodes to " << i << "th node :"<< endl;
        cin >> adj;
        cout << "Enter adjacent nodes: ";
        for(int j=0;j<adj;j++){
            int x;
            cin >> x;
            graph[i].push_back(x);
        }
    }
    
    for(int i=0;i<n;i++){
        if(!visited[i]){
            //dfs(graph,visited,i,ans);
            bfs(graph,visited,i,ans);
        }
    }
    
    cout << "Breadth first Traversal is as Follows: ";
    for(int i=0;i<ans.size();i++){
        cout << ans[i];
        if(i != ans.size()-1) cout << " -> ";
    }
}


Output: 
Enter number of nodes 3

Enter number of adjecent nodes to 0th node : 2
Enter adjacent nodes: 1 2

Enter number of adjecent nodes to 1th node : 2
Enter adjacent nodes: 0 2

Enter number of adjecent nodes to 2th node : 2
Enter adjacent nodes: 0 1

Breadth first Traversal is as Follows: 0 -> 1 -> 2
--dart-http-boundary-oXk+dj5BnCOr4WVUVyqcMlQup7oF_-+lLRquDOA3SGkyx_tC9RK--
